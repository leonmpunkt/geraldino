{"version":3,"file":"static/js/403.77627b2f.chunk.js","mappings":"gQA6DA,EAxDc,WACV,IAAAA,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,IAE5BI,EAAAA,EAAAA,YAAU,WACNC,MAAMC,GACDC,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACE,GAAI,OAAKN,EAAYM,EAAK,IAChCC,OAAM,SAACC,GAAK,OAAKC,QAAQD,MAAM,2BAA4BA,EAAM,GAC1E,GAAG,IAEH,IAAME,EAAa,CACfC,EAAG,SAAAC,GAAyB,IAAtBC,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SACR,GAAID,EAAKC,SAAS,IAAmC,QAA7BD,EAAKC,SAAS,GAAGC,QAAmB,CAAC,IAADC,EAClDC,EAAQJ,EAAKC,SAAS,GACtBI,EAAaD,EAAME,WAAWC,IAC9BA,EAAgB,OAAVF,QAAU,IAAVA,OAAU,EAAVA,EAAYG,QAAQ,iBAAkB,IAC5CC,EAAYJ,EAAWK,MAAM,aAC7BC,EAAaN,EAAWK,MAAM,aAC9BE,EAAQH,EAAYA,EAAU,GAAK,MACnCI,EAASF,EAAaA,EAAW,GAAK,MAEtCG,GADuB,OAAVT,QAAU,IAAVA,GAAAA,EAAYU,cAAcL,MAAM,cACtB,OAAVL,QAAU,IAAVA,OAAU,EAAVA,EAAYU,cAAcC,SAAS,cAChDC,EAAoB,OAAVZ,QAAU,IAAVA,GAAqC,QAA3BF,EAAVE,EAAYK,MAAM,2BAAmB,IAAAP,OAA3B,EAAVA,EAAuCe,MAEvD,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBnB,SAAA,EAC3BoB,EAAAA,EAAAA,KAAA,OACIC,IAAKlB,EAAME,WAAWgB,IACtBV,MAAOA,EACPC,OAAQA,EACRO,UAAU,UACVb,IAAKA,IAERO,GAAaO,EAAAA,EAAAA,KAAA,OAAKD,UAAU,UAAU,aAAYH,EAAQhB,SAAEgB,IAAiB,OAG1F,CACA,OAAOI,EAAAA,EAAAA,KAAA,KAAApB,SAAIA,GACf,GAGJ,OACIoB,EAAAA,EAAAA,KAAA,OAAApB,UACIoB,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CACV1B,WAAYA,EACZ2B,aAAc,SAAAC,GAAG,OACbA,EAAIC,WAAW,QAAUD,EAAG,GAAAE,OAAMC,CAAAA,SAAAA,aAAAA,WAAAA,aAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,sBAAoBF,OAAGF,EAAK,EAE9EK,cAAe,CAACC,EAAAA,GAAW9B,SAE1Bf,KAIjB,C","sources":["HalloContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport rehypeRaw from 'rehype-raw';\nimport halloContent from './text/Hallo.md';\n\nconst Hallo = () => {\n    const [markdown, setMarkdown] = useState('');\n\n    useEffect(() => {\n        fetch(halloContent)\n            .then((response) => response.text())\n            .then((text) => setMarkdown(text))\n            .catch((error) => console.error('Error fetching markdown:', error));\n    }, []);\n\n    const components = {\n        p: ({ node, children }) => {\n            if (node.children[0] && node.children[0].tagName === \"img\") {\n                const image = node.children[0];\n                const metastring = image.properties.alt;\n                const alt = metastring?.replace(/ *\\{[^)]*\\} */g, \"\");\n                const metaWidth = metastring.match(/{([^}]+)x/);\n                const metaHeight = metastring.match(/x([^}]+)}/);\n                const width = metaWidth ? metaWidth[1] : \"768\";\n                const height = metaHeight ? metaHeight[1] : \"432\";\n                const isPriority = metastring?.toLowerCase().match('{priority}');\n                const hasCaption = metastring?.toLowerCase().includes('{caption:');\n                const caption = metastring?.match(/{caption: (.*?)}/)?.pop();\n    \n                return (\n                    <div className=\"postImgWrapper\">\n                        <img\n                            src={image.properties.src}\n                            width={width}\n                            height={height}\n                            className=\"postImg\"\n                            alt={alt}\n                        />\n                        {hasCaption ? <div className=\"caption\" aria-label={caption}>{caption}</div> : null}\n                    </div>\n                );\n            }\n            return <p>{children}</p>;\n        }\n    };    \n\n    return (\n        <div>\n            <ReactMarkdown \n                components={components} \n                urlTransform={uri =>\n                    uri.startsWith(\"http\") ? uri : `${process.env.REACT_IMAGE_BASE_URL}${uri}`\n                }\n                rehypePlugins={[rehypeRaw]}\n            >\n                {markdown}\n            </ReactMarkdown>\n        </div>\n    );\n};\n\nexport default Hallo;\n"],"names":["_useState","useState","_useState2","_slicedToArray","markdown","setMarkdown","useEffect","fetch","halloContent","then","response","text","catch","error","console","components","p","_ref","node","children","tagName","_metastring$match","image","metastring","properties","alt","replace","metaWidth","match","metaHeight","width","height","hasCaption","toLowerCase","includes","caption","pop","_jsxs","className","_jsx","src","ReactMarkdown","urlTransform","uri","startsWith","concat","process","REACT_IMAGE_BASE_URL","rehypePlugins","rehypeRaw"],"sourceRoot":""}